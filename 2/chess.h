/*
 * Продолжение задания №2
 * Заголовочные файлы
 * Хромой король.На квадратной доске расставлены монеты, достоинством от 1 до
 * 100. Хромой король, находящийся в правом нижнем углу, мечтает попасть в левый верхний.
 * При этом он может передвигаться только в клетку слева или сверху и хочет, чтобы сумма всех
 * монет, оказавшихся у него на пути, была бы максимальной.Определить эту сумму и путь, каким
 * образом должен двигаться король, чтобы ее собрать.Ввод и вывод организовать при помощи
 * текстовых файлов.Формат входных данных : в первой строке входного файла записано число
 * N - размер доски(1 < N < 80).Далее следует N строк, каждая из которых содержит N целых чисел,
 * представляющих доску.В первую строку выходного файл нужно вывести единственное число :
 * максимальную сумму, а во второй строке вывести путь в виде строки символов, обозначив
 * символом L движение влево, а символом U - движение вверх.
*/

#ifndef CHESS_H_
#define CHESS_H_

#include <string>
#include <vector>

/**
 * Решает задачу хромого короля
 * @param board Доска с монетами
 * @param dp Матрица для хранения максимальных сумм
 * @param path Матрица для хранения пути
 */
void SolveKingProblem(const std::vector<std::vector<int>>& coin_board,
    std::vector<std::vector<int>>& dp_matrix,
    int board_size);

/**
 * Восстанавливает путь короля по матрице направлений
 * @param path Матрица направлений (U - вверх, L - влево)
 * @return Строка с описанием пути (например, "U L L U")
 */
std::string ReconstructPath(const std::vector<std::vector<int>>& dp_matrix,
    int board_size);

#endif  // CHESS_H_